package stdlog

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"os"
	"runtime"
	"strings"
	"sync"
	"time"

	"go.uber.org/zap/zapcore"

	"../context"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/0123 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/0123
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	Lmodule                       // module name
	Llevel                        // level: 0(Debug), 1(Info), 2(Warn), 3(Error), 4(Panic), 5(Fatal)
	Llongcolor                    // color will start [info] end of line
	Lshortcolor                   // color only include [info]
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
	//Ldefault      = Llevel | LstdFlags | Lshortfile | Llongcolor
) // [prefix][time][level][module][shortfile|longfile]

const (
	Lall = iota
)

const (
	ForeBlack  = iota + 30 //30
	ForeRed                //31
	ForeGreen              //32
	ForeYellow             //33
	ForeBlue               //34
	ForePurple             //35
	ForeCyan               //36
	ForeWhite              //37
)

const (
	BackBlack  = iota + 40 //40
	BackRed                //41
	BackGreen              //42
	BackYellow             //43
	BackBlue               //44
	BackPurple             //45
	BackCyan               //46
	BackWhite              //47
)

var levels = []string{
	"[Debug]",
	"[Info]",
	"[Warn]",
	"[Error]",
	"[Panic]",
	"[Fatal]",
}

var colors = []int{
	ForeCyan,
	ForeGreen,
	ForeYellow,
	ForeRed,
	ForePurple,
	ForeBlue,
}

// MUST called before all logs
func SetColors(cls []int) {
	colors = cls
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu         sync.Mutex // ensures atomic writes; protects the following fields
	prefix     string     // prefix to write at beginning of each line
	flag       int        // properties
	Level      int8
	out        io.Writer    // destination for output
	buf        bytes.Buffer // for accumulating text to write
	levelStats [6]int64
	loc        *time.Location
	callSkip   int
	cs         string
}

func (l *Logger) GetLevel() int8 {
	return l.Level
}

func (l *Logger) SetLevel(level int8) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.Level = level
}

func getFieldString(fields []zapcore.Field) string {
	r := make([]string, 0, len(fields))
	for _, f := range fields {
		switch f.Type {
		case zapcore.BoolType:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, f.Integer == 1))
		case zapcore.DurationType:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, time.Duration(f.Integer)))
		case zapcore.Float64Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, math.Float64frombits(uint64(f.Integer))))
		case zapcore.Float32Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, math.Float32frombits(uint32(f.Integer))))
		case zapcore.Int64Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, f.Integer))
		case zapcore.Int32Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, int32(f.Integer)))
		case zapcore.Int16Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, int16(f.Integer)))
		case zapcore.Int8Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, int8(f.Integer)))
		case zapcore.StringType:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, f.String))
		case zapcore.TimeType:
			if f.Interface != nil {
				r = append(r, fmt.Sprintf("%s[%v]", f.Key, time.Unix(0, f.Integer).In(f.Interface.(*time.Location))))
			} else {
				r = append(r, fmt.Sprintf("%s[%v]", f.Key, time.Unix(0, f.Integer)))
			}
		case zapcore.Uint64Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, uint64(f.Integer)))
		case zapcore.Uint32Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, uint32(f.Integer)))
		case zapcore.Uint16Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, uint16(f.Integer)))
		case zapcore.Uint8Type:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, uint8(f.Integer)))
		case zapcore.UintptrType:
			r = append(r, fmt.Sprintf("%s[%v]", f.Key, uintptr(f.Integer)))
		case zapcore.NamespaceType:
			r = append(r, fmt.Sprintf("%s", f.Key))
		case zapcore.SkipType:
			continue
		}
	}
	return strings.Join(r, "  ")
}

func (l *Logger) Debug(ctx context.Context, msg string, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 0, l.callSkip+1, msg+":"+getFieldString(fields)+" "+l.cs)
}

func (l *Logger) Info(ctx context.Context, msg string, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 1, l.callSkip+1, msg+":"+getFieldString(fields)+" "+l.cs)
}

func (l *Logger) Warn(ctx context.Context, msg string, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 2, l.callSkip+1, msg+":"+getFieldString(fields)+" "+l.cs)
}

func (l *Logger) Error(ctx context.Context, msg string, err error, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 3, l.callSkip+1, err.Error()+":"+msg+":"+getFieldString(fields)+" "+l.cs)
}

func (l *Logger) Panic(ctx context.Context, msg string, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 4, l.callSkip+1, msg+":"+getFieldString(fields)+" "+l.cs)
}

func (l *Logger) Fatal(ctx context.Context, msg string, fields ...zapcore.Field) {
	cid := ""
	if ctx != nil {
		cid = ctx.String()
	}
	l.output(cid, 5, l.callSkip+1, msg+":"+getFieldString(fields)+" "+l.cs)
}
func NewLogger(out io.Writer, name string, level int8, callSkip int, m map[string]interface{}) (*Logger, error) {
	cs := ""
	for k, v := range m {
		cs += fmt.Sprintf("%s[%s]", k, v)
	}
	l := &Logger{out: out, prefix: name + " ", Level: level, flag: LstdFlags | Lshortfile | Lshortcolor,
		loc: time.UTC, callSkip: callSkip, cs: cs}
	if out != os.Stdout {
		l.flag = RmColorFlags(l.flag)
	}
	return l, nil
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *bytes.Buffer, i int, wid int) {
	var u = uint(i)
	if u == 0 && wid <= 1 {
		buf.WriteByte('0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}

	// avoid slicing b to avoid an allocation.
	for bp < len(b) {
		buf.WriteByte(b[bp])
		bp++
	}
}

func moduleOf(file string) string {
	pos := strings.LastIndex(file, "/")
	if pos != -1 {
		pos1 := strings.LastIndex(file[:pos], "/src/")
		if pos1 != -1 {
			return file[pos1+5 : pos]
		}
	}
	return "UNKNOWN"
}

func (l *Logger) formatHeader(buf *bytes.Buffer, t time.Time,
	file string, line int, lvl int8, reqId string) {
	if l.prefix != "" {
		buf.WriteString(l.prefix)
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			buf.WriteByte('/')
			itoa(buf, int(month), 2)
			buf.WriteByte('/')
			itoa(buf, day, 2)
			buf.WriteByte(' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			buf.WriteByte(':')
			itoa(buf, min, 2)
			buf.WriteByte(':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				buf.WriteByte('.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			buf.WriteByte(' ')
		}
	}
	if reqId != "" {
		buf.WriteByte('[')
		buf.WriteString(reqId)
		buf.WriteByte(']')
		buf.WriteByte(' ')
	}

	if l.flag&(Lshortcolor|Llongcolor) != 0 {
		buf.WriteString(fmt.Sprintf("\033[1;%dm", colors[lvl]))
	}
	if l.flag&Llevel != 0 {
		buf.WriteString(levels[lvl])
		buf.WriteByte(' ')
	}
	if l.flag&Lshortcolor != 0 {
		buf.WriteString("\033[0m")
	}

	if l.flag&Lmodule != 0 {
		buf.WriteByte('[')
		buf.WriteString(moduleOf(file))
		buf.WriteByte(']')
		buf.WriteByte(' ')
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		buf.WriteString(file)
		buf.WriteByte(':')
		itoa(buf, line, -1)
		buf.WriteByte(' ')
	}
}

// output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) output(reqId string, lvl int8, calldepth int, s string) error {
	if lvl < l.Level {
		return nil
	}
	now := time.Now().In(l.loc) // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile|Lmodule) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.levelStats[lvl]++
	l.buf.Reset()
	l.formatHeader(&l.buf, now, file, line, lvl, reqId)
	l.buf.WriteString(s)
	if l.flag&Llongcolor != 0 {
		l.buf.WriteString("\033[0m")
	}
	if len(s) > 0 && s[len(s)-1] != '\n' {
		l.buf.WriteByte('\n')
	}
	_, err := l.out.Write(l.buf.Bytes())
	return err
}

// -----------------------------------------
func (l *Logger) Stat() (stats []int64) {
	l.mu.Lock()
	v := l.levelStats
	l.mu.Unlock()
	return v[:]
}

// Flags r = append(r,s the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

func RmColorFlags(flag int) int {
	// for un std out, it should not show color since almost them don't support
	if flag&Llongcolor != 0 {
		flag = flag ^ Llongcolor
	}
	if flag&Lshortcolor != 0 {
		flag = flag ^ Lshortcolor
	}
	return flag
}

func (l *Logger) Location() *time.Location {
	return l.loc
}

func (l *Logger) SetLocation(loc *time.Location) {
	l.loc = loc
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.out != os.Stdout {
		flag = RmColorFlags(flag)
	}
	l.flag = flag
}

// Prefix r = append(r,s the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

func Stack(v ...interface{}) string {
	s := fmt.Sprint(v...)
	s += "\n"
	buf := make([]byte, 1024*1024)
	n := runtime.Stack(buf, true)
	s += string(buf[:n])
	s += "\n"
	return s
}
